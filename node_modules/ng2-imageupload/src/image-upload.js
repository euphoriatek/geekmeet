System.register(['@angular/core', './utils'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, utils_1;
    var ImageUpload;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (utils_1_1) {
                utils_1 = utils_1_1;
            }],
        execute: function() {
            ImageUpload = (function () {
                function ImageUpload(_elementref, _renderer) {
                    this._elementref = _elementref;
                    this._renderer = _renderer;
                    this.imageSelected = new core_1.EventEmitter();
                }
                ImageUpload.prototype.ngOnInit = function () {
                    var _this = this;
                    this._renderer.listen(this._elementref.nativeElement, 'change', function (e) { return _this.readFiles(e); });
                };
                ImageUpload.prototype.readFiles = function (event) {
                    var _this = this;
                    for (var _i = 0, _a = event.target.files; _i < _a.length; _i++) {
                        var file = _a[_i];
                        var result = {
                            file: file,
                            url: URL.createObjectURL(file)
                        };
                        this.fileToDataURL(file, result).then(function (r) { return _this.resize(r); }).then(function (r) { return _this.imageSelected.emit(r); });
                    }
                };
                ImageUpload.prototype.resize = function (result) {
                    var _this = this;
                    return new Promise(function (resolve) {
                        if (_this.resizeOptions) {
                            utils_1.createImage(result.url, function (image) {
                                var dataUrl = utils_1.resizeImage(image, _this.resizeOptions);
                                result.resized = {
                                    dataURL: dataUrl,
                                    type: dataUrl.match(/:(.+\/.+;)/)[1]
                                };
                                resolve(result);
                            });
                        }
                        else {
                            resolve(result);
                        }
                    });
                };
                ImageUpload.prototype.fileToDataURL = function (file, result) {
                    return new Promise(function (resolve) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            result.dataURL = reader.result;
                            resolve(result);
                        };
                        reader.readAsDataURL(file);
                    });
                };
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', Object)
                ], ImageUpload.prototype, "imageSelected", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Object)
                ], ImageUpload.prototype, "resizeOptions", void 0);
                ImageUpload = __decorate([
                    core_1.Directive({
                        selector: 'input[type=file][image-upload]'
                    }), 
                    __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
                ], ImageUpload);
                return ImageUpload;
            }());
            exports_1("ImageUpload", ImageUpload);
        }
    }
});
//# sourceMappingURL=image-upload.js.map