"use strict";
var core_1 = require('@angular/core');
var recaptcha_loader_service_1 = require('./recaptcha-loader.service');
var nextId = 0;
var RecaptchaComponent = (function () {
    function RecaptchaComponent(_el, _loader, _zone) {
        this._el = _el;
        this._loader = _loader;
        this._zone = _zone;
        this.id = "ngrecaptcha-" + nextId++;
        this.resolved = new core_1.EventEmitter();
    }
    RecaptchaComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subscription = this._loader.ready.subscribe(function (grecaptcha) {
            if (grecaptcha != null) {
                _this._grecaptcha = grecaptcha;
                _this._renderRecaptcha();
            }
        });
    };
    RecaptchaComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    RecaptchaComponent.prototype.reset = function () {
        if (this.widget != null) {
            this._grecaptcha.reset(this.widget);
            this.resolved.emit(null);
        }
    };
    /** @internal */
    RecaptchaComponent.prototype.captchaReponseCallback = function (response) {
        this.resolved.emit(response);
    };
    /** @internal */
    RecaptchaComponent.prototype._renderRecaptcha = function () {
        var _this = this;
        this.widget = this._grecaptcha.render(this.id, {
            callback: function (response) {
                _this._zone.run(function () { return _this.captchaReponseCallback(response); });
            },
            'expired-callback': function () {
                _this._zone.run(function () { return _this.reset(); });
            },
            sitekey: this.siteKey,
            size: this.size,
            tabindex: this.tabIndex,
            theme: this.theme,
            type: this.type,
        });
    };
    RecaptchaComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'recaptcha',
                    template: "<div [id]=\"id\"></div>",
                },] },
    ];
    /** @nocollapse */
    RecaptchaComponent.ctorParameters = [
        { type: core_1.ElementRef, },
        { type: recaptcha_loader_service_1.RecaptchaLoaderService, },
        { type: core_1.NgZone, },
    ];
    RecaptchaComponent.propDecorators = {
        'id': [{ type: core_1.Input },],
        'siteKey': [{ type: core_1.Input },],
        'theme': [{ type: core_1.Input },],
        'type': [{ type: core_1.Input },],
        'size': [{ type: core_1.Input },],
        'tabIndex': [{ type: core_1.Input },],
        'resolved': [{ type: core_1.Output },],
    };
    return RecaptchaComponent;
}());
exports.RecaptchaComponent = RecaptchaComponent;
